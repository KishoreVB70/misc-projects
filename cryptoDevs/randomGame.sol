// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";

//Address -> 0x13265a49bB68FE64796c4B32E33c1C8aa5Ccaaeb

contract RandomWinnerGame is VRFConsumerBase{

    //Chainlink variables

    // The amount of LINK to send with the request
    uint256 public fee;
    // ID of public key against which randomness is generated
    bytes32 public keyHash;

    address[] public players;

    bool public gameStarted;
    uint256 entryFee;
    uint256 public gameId;

    event GameStarted(uint256 gameId, uint256 entryFee, address player);
    event PlayerJoined(uint256 gameId, address player);
    event GameEnded(uint256 gameId, address winner,bytes32 requestId);

    modifier correctValue(uint _entryFee){
        require(msg.value == _entryFee, "send correct value");
        _;
    }

   /**
   * constructor inherits a VRFConsumerBase and initiates the values for keyHash, fee and gameStarted
   * @param vrfCoordinator address of VRFCoordinator contract -> 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D
   * @param linkToken address of LINK token contract -> 0x326C977E6efc84E512bB9C30f76E30c160eD06FB
   * @param vrfFee the amount of LINK to send with the request -> 	0.25 LINK
   * @param vrfKeyHash ID of public key against which randomness is generated -> 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15
   */
    constructor(address vrfCoordinator, address linkToken, bytes32 vrfKeyHash, uint256 vrfFee)
    VRFConsumerBase(vrfCoordinator, linkToken) {
        keyHash = vrfKeyHash;
        fee = vrfFee;
        gameStarted = false;
    }

    function startGame(uint256 _entryFee) public payable correctValue(_entryFee){
        require(!gameStarted, "Game is currently running");
        delete players;
        gameStarted = true;
        entryFee = _entryFee;
        gameId += 1;

        players.push(msg.sender);
        emit GameStarted(gameId,entryFee, msg.sender);
    }

    function joinGame() public payable correctValue(entryFee){
        require(gameStarted, "Game has not been started yet");
        require(players.length < 2, "Game is full");

        players.push(msg.sender);
        emit PlayerJoined(gameId, msg.sender);
        getRandomWinner();
    }

    function getRandomWinner() private returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK");
        return requestRandomness(keyHash, fee);
    }

    function depositLink(uint _token) public {
        LINK.transfer(address(this), _token);
    }
    
    /**
    * fulfillRandomness is called by VRFCoordinator when it receives a valid VRF proof.
    * This function is overrided to act upon the random number generated by Chainlink VRF.
    * @param requestId  this ID is unique for the request we sent to the VRF Coordinator
    * @param randomness this is a random unit256 generated and returned to us by the VRF Coordinator
   */
    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual override  {
        uint256 winnerIndex = randomness % 2;
        address winner = players[winnerIndex];
        (bool sent,) = winner.call{value: address(this).balance}("");
        require(sent, "Failed to send Ether");
        emit GameEnded(gameId, winner,requestId); 
        gameStarted = false;
    }

    receive() external payable {}

    fallback() external payable {}
}